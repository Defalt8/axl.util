# library
set( LIBAXLUTIL_OUTPUT_NAME axl.util )
add_library( axl.util ${LIBAXLUTIL_TYPE}
	"lib.cpp"
	"String.cpp"
	"WString.cpp"
)
target_compile_definitions( axl.util
	PRIVATE LIBAXLUTIL_BUILD
	PUBLIC LIBAXLUTIL_VERSION_MAJOR=${axl.util_VERSION_MAJOR}
	PUBLIC LIBAXLUTIL_VERSION_MINOR=${axl.util_VERSION_MINOR}
	PUBLIC LIBAXLUTIL_VERSION_PATCH=${axl.util_VERSION_PATCH}
)
if( "${LIBAXLUTIL_TYPE}" MATCHES "^[Ss][Tt][Aa][Tt][Ii][Cc]$" )
	set( LIBAXLUTIL_SUFFIX s )
	target_compile_definitions( axl.util
		PUBLIC LIBAXLUTIL_STATIC
	)
	if( INSTALL_ARCHIVES AND LIBAXLUTIL_INSTALL_ARCHIVES )
		install( TARGETS axl.util
			ARCHIVE DESTINATION "${CMAKE_INSTALL_PREFIX}/${ARCHIVES_INSTALL_DIR}"
		)
	endif()
elseif( "${LIBAXLUTIL_TYPE}" MATCHES "^[Ss][Hh][Aa][Rr][Ee][Dd]$" )
	target_compile_definitions( axl.util
		PUBLIC LIBAXLUTIL_SHARED
	)
	if( INSTALL_ARCHIVES AND LIBAXLUTIL_INSTALL_ARCHIVES )
		install( TARGETS axl.util
			ARCHIVE DESTINATION "${CMAKE_INSTALL_PREFIX}/${ARCHIVES_INSTALL_DIR}"
		)
	endif()
	if( INSTALL_BINARIES AND LIBAXLUTIL_INSTALL_BINARIES )
		install( TARGETS axl.util
			RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/${BINARY_INSTALL_DIR}"
		)
	endif()
else()
	set( LIBAXLUTIL_SUFFIX l )
endif()

if( "${CMAKE_BUILD_TYPE}" MATCHES "[Dd][Ee][Bb][Uu][Gg]" )
	set( LIBAXLUTIL_SUFFIX "${LIBAXLUTIL_SUFFIX}d" )
endif()

set_target_properties( axl.util PROPERTIES
	OUTPUT_NAME "${LIBAXLUTIL_OUTPUT_NAME}${LIBAXLUTIL_SUFFIX}"
	ARCHIVE_OUTPUT_NAME "${LIBAXLUTIL_OUTPUT_NAME}${LIBAXLUTIL_SUFFIX}"
	LIBRARY_OUTPUT_NAME "${LIBAXLUTIL_OUTPUT_NAME}${LIBAXLUTIL_SUFFIX}"
	RUNTIME_OUTPUT_NAME "${LIBAXLUTIL_OUTPUT_NAME}${LIBAXLUTIL_SUFFIX}"
	LIBRARY_OUTPUT_DIRECTORY "${LIBAXLUTIL_EXPORT_DIR}"
	RUNTIME_OUTPUT_DIRECTORY "${LIBAXLUTIL_EXPORT_DIR}"
)
